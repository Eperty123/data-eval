using System;
using System.Linq;

public sealed class SimpleAnonymousTestWrapper
{
	private static Dictionary<string, Func<object, object>> properties = null;

	private object innerObject = null;

	public SimpleAnonymousTestWrapper(object innerObject)
	{
		if (properties == null)
		{
			properties = new ReadonlyPropertyAccessor().GetProperties(innerObject.GetType());
		}

		this.innerObject = innerObject;
	}

	public System.String SimpleProperty1
	{
		get
		{
			return (System.String)GetValue("SimpleProperty1");
		}
	}public System.Int32 SimpleNumber
	{
		get
		{
			return (System.Int32)GetValue("SimpleNumber");
		}
	}

	private object GetValue(string property)
	{
		return properties[property](innerObject);
	}

	internal sealed class ReadonlyPropertyAccessor
	{
		public Dictionary<string, Func<object, object>> GetProperties(Type type)
		{
			PropertyFinder finder = new PropertyFinder();

			GetInstancePropertyValueExpression getGenerator = new GetInstancePropertyValueExpression();

			Dictionary<string, Type> properties = finder.GetProperties(type);

			return properties.ToDictionary(
				keyValue => keyValue.Key,
				keyValue => getGenerator.GetFunc(type, keyValue.Key));
		}
	}

	internal sealed class PropertyFinder
	{
		public Dictionary<string, Type> GetProperties(Type type)
		{
			return type.GetProperties(
				BindingFlags.GetProperty |
				BindingFlags.Instance |
				BindingFlags.Public |
				BindingFlags.DeclaredOnly)
				.ToDictionary(p => p.Name, p => p.PropertyType);
		}
	}

	internal sealed class GetInstancePropertyValueExpression
	{
		public Func<object, object> GetFunc(
			Type instanceType,
			string memberName)
		{
			PropertyInfo member = instanceType.GetProperty(
				memberName,
				BindingFlags.Public |
				BindingFlags.Instance);

			ParameterExpression instance = 
				Expression.Parameter(typeof(object), "i");

			MemberExpression memberExp =
				Expression.Property(
					Expression.Convert(instance, member.DeclaringType),
					member);

			Expression<Func<object, object>> getter =
				Expression.Lambda<Func<object, object>>(
					Expression.Convert(memberExp, typeof(object)),
					instance);

			Func<object, object> func = getter.Compile();

			return func;
		}
	}
}
